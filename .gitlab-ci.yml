include: "/.templates.yml"

# A special job for compiling the tinker interface
# By adding "tinker" as a dependency, other jobs can use it

tinker:
  stage: build
  image: ${CI_REGISTRY}/molcas/dockerfiles/gcc-5.4:latest
  variables:
    # A patch to the tinker patch to make it work in low memory conditions
    patch_to_patch: |
                    diff -Nu -x '*~' -x '*.o' 6.3.3/source_orig/sizes.i 6.3.3/source/sizes.i
                    --- 6.3.3/source_orig/sizes.i   2015-04-14 13:58:10.122343730 +0200
                    +++ 6.3.3/source/sizes.i        2015-04-15 13:48:53.796041225 +0200
                    @@ -64,7 +64,7 @@
                           integer maxele,maxamino,maxnuc
                           integer maxbnd,maxang,maxtors
                           integer maxbitor
                    -      parameter (maxatm=100000)
                    +      parameter (maxatm=1000)
                           parameter (maxval=8)
                           parameter (maxgrp=1000)
                           parameter (maxref=10)
  before_script:
    - >
      if ( ! which patch ) ; then apt-get install -y --no-install-recommends patch ; fi
  script:
    # Use backup if the tinker website is down
    - >
      sed -i -e 's/wget.*/& || \\/' -e '/wget/a wget https://gitlab.com/Molcas/Mirrors/Tinker/raw/master/${TINKERVERSION}.tar.gz?private_token=Y5PsqzY_Ev8U6JQDGyuL -O ${TINKERVERSION}.tar.gz' Tools/patch2tinker/get_tinker
    # Apply the low-memory patch
    - |
      eval `grep TINKERVERSION= Tools/patch2tinker/get_tinker`
      eval `grep PATCH= Tools/patch2tinker/get_tinker`
      echo "${patch_to_patch}" >> Tools/patch2tinker/${PATCH}
    - >
      echo "y" | Tools/patch2tinker/get_tinker
  after_script:
    - |
      mkdir build
      cp -Lr tinker build
  artifacts:
    paths:
      - build/
    expire_in: 1 day
  except:
    - master

# Another special job for building doxygen documentation
# This is done in a different project, so here simply run a trigger
# whenever the master changes

trigger_doc:
  stage: build
  image: ${CI_REGISTRY}/molcas/dockerfiles/ubuntu-14.04:latest
  script:
    - export PROJECT_URL=${CI_PROJECT_URL#https://}
    - >
      curl --request POST
      --form "token=$CI_JOB_TOKEN"
      --form "ref=master"
      --form "variables[SOURCE_URL]=${PROJECT_URL}"
      --form "variables[SOURCE_COMMIT]=${CI_COMMIT_SHA}"
      https://gitlab.com/api/v4/projects/Molcas%2Fdoc/trigger/pipeline
  only:
    - master

# Define the actual jobs, each job has a "build" and a "test" stage,
# the latter depends on the former, variables can be overriden.

build:plain:
  stage: build
  <<: *plain
  <<: *compile
test:plain_1:
  stage: test
  dependencies:
    - build:plain
    - tinker
  <<: *plain
  <<: *run-tests
  variables:
    <<: *plain_vars
    subset: "1"
test:plain_2:
  stage: test
  dependencies:
    - build:plain
    - tinker
  <<: *plain
  <<: *run-tests
  variables:
    <<: *plain_vars
    subset: "2"

build:options:
  stage: build
  <<: *options
  <<: *compile
test:options_1:
  stage: test
  dependencies:
    - build:options
    - tinker
  <<: *options
  <<: *run-tests
  variables:
    <<: *options_vars
    subset: "1"
test:options_2:
  stage: test
  dependencies:
    - build:options
    - tinker
  <<: *options
  <<: *run-tests
  variables:
    <<: *options_vars
    subset: "2"

build:pgi:
  stage: build
  <<: *pgi
  <<: *compile
test:pgi_1:
  stage: test
  dependencies:
    - build:pgi
    - tinker
  <<: *pgi
  <<: *run-tests
  variables:
    <<: *pgi_vars
    subset: "1"
test:pgi_2:
  stage: test
  dependencies:
    - build:pgi
    - tinker
  <<: *pgi
  <<: *run-tests
  variables:
    <<: *pgi_vars
    subset: "2"

build:sun:
  stage: build
  <<: *sun
  <<: *compile
test:sun_1:
  stage: test
  dependencies:
    - build:sun
    - tinker
  <<: *sun
  <<: *run-tests
  variables:
    <<: *sun_vars
    subset: "1"
test:sun_2:
  stage: test
  dependencies:
    - build:sun
    - tinker
  <<: *sun
  <<: *run-tests
  variables:
    <<: *sun_vars
    subset: "2"

build:intel:
  stage: build
  <<: *intel
  <<: *compile
test:intel_1:
  stage: test
  dependencies:
    - build:intel
    - tinker
  <<: *intel
  <<: *run-tests
  variables:
    <<: *intel_vars
    subset: "1"
test:intel_2:
  stage: test
  dependencies:
    - build:intel
    - tinker
  <<: *intel
  <<: *run-tests
  variables:
    <<: *intel_vars
    subset: "2"

build:intel13:
  stage: build
  <<: *intel13
  <<: *compile
test:intel13:
  stage: test
  dependencies:
    - build:intel13
  <<: *intel13
  <<: *run-tests

build:debug:
  stage: build
  <<: *debug
  <<: *compile
test:debug:
  stage: test
  dependencies:
    - build:debug
  <<: *debug
  <<: *run-tests
